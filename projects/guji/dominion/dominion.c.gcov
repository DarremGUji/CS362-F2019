        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 504 returned 100% blocks executed 100%
      504:    8:int compare(const void* a, const void* b) {
      504:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
      221:   10:    return 1;
      283:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
       84:   12:    return -1;
      199:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1 returned 100% blocks executed 88%
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
call    0 returned 100%
        1:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
        2:  115:		  if (numPlayers == 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        9:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 16 returned 100% blocks executed 100%
       16:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       16:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       16:  209:  if (state->deckCount[player] < 1)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        1:  210:    return -1;
       15:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      226:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
      196:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      196:  216:    newDeck[newDeckPos] = state->deck[player][card];
      196:  217:    newDeckPos++;
      855:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
      659:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      196:  221:    state->deckCount[player]--;
        -:  222:  }
      211:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
      196:  224:    state->deck[player][i] = newDeck[i];
      196:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       15:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 39 returned 100% blocks executed 80%
       39:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
       39:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       39:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
       39:  243:  if ( state->numActions < 1 )
branch  0 taken 85% (fallthrough)
branch  1 taken 15%
        -:  244:    {
       33:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
        6:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:
        -:  251:  //check if selected card is an action
        6:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
        6:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
        6:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        6:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:
        6:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 32 returned 100% blocks executed 79%
       32:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       32:  280:  who = state->whoseTurn;
        -:  281:
       32:  282:  if (state->numBuys < 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
       32:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
       32:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       32:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       32:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:
       32:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
       32:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
       32:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 258 returned 100% blocks executed 100%
      258:  311:int numHandCards(struct gameState *state) {
      258:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 501 returned 100% blocks executed 100%
      501:  315:int handCard(int handPos, struct gameState *state) {
      501:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
      501:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 64 returned 100% blocks executed 100%
       64:  320:int supplyCount(int card, struct gameState *state) {
       64:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 835 returned 100% blocks executed 100%
      835:  346:int whoseTurn(struct gameState *state) {
      835:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 35 returned 100% blocks executed 100%
       35:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       35:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  354:
        -:  355:  //Discard hand
      222:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
      187:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      187:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
       35:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
       35:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
       18:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
       17:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       35:  370:  state->outpostPlayed = 0;
       35:  371:  state->phase = 0;
       35:  372:  state->numActions = 1;
       35:  373:  state->coins = 0;
       35:  374:  state->numBuys = 1;
       35:  375:  state->playedCardCount = 0;
       35:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      210:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      175:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  382:  }
        -:  383:
        -:  384:  //Update money
       35:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  386:
       35:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 36 returned 100% blocks executed 82%
       36:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
       36:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       35:  401:  j = 0;
      910:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      875:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
       35:  409:  if ( j >= 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
       35:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 2 returned 100% blocks executed 72%
        2:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        2:  420:  int score = 0;
        -:  421:  //score from hand
        7:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  423:    {
        5:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        5:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        5:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       46:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  434:    {
       44:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       44:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
       44:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       44:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
       44:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       44:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       46:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  445:    {
       44:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
       44:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
       44:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       44:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
       44:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       44:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  452:    }
        -:  453:
        2:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 195 returned 100% blocks executed 92%
      195:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      195:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      189:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
      176:  534:      state->deck[player][i] = state->discard[player][i];
      176:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       13:  538:    state->deckCount[player] = state->discardCount[player];
       13:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       13:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
       13:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       13:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
       13:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       13:  559:    if (deckCounter == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  560:      return -1;
        -:  561:
       13:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       13:  563:    state->deckCount[player]--;
       13:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      182:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      182:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      182:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      182:  576:    state->deckCount[player]--;
      182:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      195:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 64 returned 100% blocks executed 23%
       64:  583:int getCost(int cardNumber)
        -:  584:{
       64:  585:  switch( cardNumber )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 25%
branch  4 taken 0%
branch  5 taken 47%
branch  6 taken 16%
branch  7 taken 6%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 6%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
       16:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
       30:  598:      return 3;
        -:  599:    case gold:
       10:  600:      return 6;
        -:  601:    case adventurer:
        4:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
        4:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 6 returned 100% blocks executed 18%
        6:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        6:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        6:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        6:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        6:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
        6:  660:  int z = 0;// this is the counter for the temp hand
        6:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        4:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:
        -:  665:
        -:  666:  //uses switch to select card and perform actions
        6:  667:  switch( card )
branch  0 taken 67%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 33%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:    case adventurer:
       17:  670:      while(drawntreasure<2){
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        9:  671:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        1:  672:	  shuffle(currentPlayer, state);
call    0 returned 100%
        -:  673:	}
        9:  674:	drawCard(currentPlayer, state);
call    0 returned 100%
        9:  675:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        9:  676:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
branch  2 taken 25% (fallthrough)
branch  3 taken 75%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        8:  677:	  drawntreasure++;
        -:  678:	else{
        1:  679:	  temphand[z]=cardDrawn;
        1:  680:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        1:  681:	  z++;
        -:  682:	}
        -:  683:      }
        9:  684:      while(z-1>=0){
branch  0 taken 20%
branch  1 taken 80% (fallthrough)
        1:  685:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        1:  686:	z=z-1;
        -:  687:      }
        4:  688:      return 0;
        -:  689:
        -:  690:    case council_room:
        -:  691:      //+4 Cards
    #####:  692:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  693:	{
    #####:  694:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  695:	}
        -:  696:
        -:  697:      //+1 Buy
    #####:  698:      state->numBuys++;
        -:  699:
        -:  700:      //Each other player draws a card
    #####:  701:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  702:	{
    #####:  703:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  704:	    {
    #####:  705:	      drawCard(i, state);
call    0 never executed
        -:  706:	    }
        -:  707:	}
        -:  708:
        -:  709:      //put played card in played card pile
    #####:  710:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  711:
    #####:  712:      return 0;
        -:  713:
        -:  714:    case feast:
        -:  715:      //gain card with cost up to 5
        -:  716:      //Backup hand
    #####:  717:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  718:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  719:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  720:      }
        -:  721:      //Backup hand
        -:  722:
        -:  723:      //Update Coins for Buy
    #####:  724:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  725:      x = 1;//Condition to loop on
    #####:  726:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  727:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  728:	  if (DEBUG)
        -:  729:	    printf("None of that card left, sorry!\n");
        -:  730:
        -:  731:	  if (DEBUG){
        -:  732:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  733:	  }
        -:  734:	}
    #####:  735:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  736:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  737:
        -:  738:	  if (DEBUG){
        -:  739:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  740:	  }
        -:  741:	}
        -:  742:	else{
        -:  743:
        -:  744:	  if (DEBUG){
        -:  745:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  746:	  }
        -:  747:
    #####:  748:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  749:	  x = 0;//No more buying cards
        -:  750:
        -:  751:	  if (DEBUG){
        -:  752:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  753:	  }
        -:  754:
        -:  755:	}
        -:  756:      }
        -:  757:
        -:  758:      //Reset Hand
    #####:  759:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  760:	state->hand[currentPlayer][i] = temphand[i];
    #####:  761:	temphand[i] = -1;
        -:  762:      }
        -:  763:      //Reset Hand
        -:  764:
    #####:  765:      return 0;
        -:  766:
        -:  767:    case gardens:
    #####:  768:      return -1;
        -:  769:
        -:  770:    case mine:
    #####:  771:      return mineEffect(choice1, choice2, state, currentPlayer, handPos, nextPlayer);
call    0 never executed
        -:  772:
        -:  773:    case remodel:
    #####:  774:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  775:
    #####:  776:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  777:	{
    #####:  778:	  return -1;
        -:  779:	}
        -:  780:
    #####:  781:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  782:
        -:  783:      //discard card from hand
    #####:  784:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  785:
        -:  786:      //discard trashed card
    #####:  787:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  788:	{
    #####:  789:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  790:	    {
    #####:  791:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  792:	      break;
        -:  793:	    }
        -:  794:	}
        -:  795:
        -:  796:
    #####:  797:      return 0;
        -:  798:
        -:  799:    case smithy:
        -:  800:      //+3 Cards
        8:  801:      for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  802:	{
        6:  803:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  804:	}
        -:  805:
        -:  806:      //discard card from hand
        2:  807:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  808:      return 0;
        -:  809:
        -:  810:    case village:
        -:  811:      //+1 Card
    #####:  812:      drawCard(currentPlayer, state);
call    0 never executed
        -:  813:
        -:  814:      //+2 Actions
    #####:  815:      state->numActions = state->numActions + 2;
        -:  816:
        -:  817:      //discard played card from hand
    #####:  818:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  819:      return 0;
        -:  820:
        -:  821:    case baron:
    #####:  822:      return baronEffect(choice1, state, currentPlayer, bonus);
call    0 never executed
        -:  823:
        -:  824:
        -:  825:    case great_hall:
        -:  826:      //+1 Card
    #####:  827:      drawCard(currentPlayer, state);
call    0 never executed
        -:  828:
        -:  829:      //+1 Actions
    #####:  830:      state->numActions++;
        -:  831:
        -:  832:      //discard card from hand
    #####:  833:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  834:      return 0;
        -:  835:
        -:  836:    case minion:
    #####:  837:       return minionEffect(choice1, choice2, state, currentPlayer, handPos);
call    0 never executed
        -:  838:
        -:  839:    case steward:
    #####:  840:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  841:	{
        -:  842:	  //+2 cards
    #####:  843:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  844:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  845:	}
    #####:  846:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  847:	{
        -:  848:	  //+2 coins
    #####:  849:	  state->coins = state->coins + 2;
        -:  850:	}
        -:  851:      else
        -:  852:	{
        -:  853:	  //trash 2 cards in hand
    #####:  854:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  855:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  856:	}
        -:  857:
        -:  858:      //discard card from hand
    #####:  859:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  860:      return 0;
        -:  861:
        -:  862:    case tribute:
    #####:  863:      tributeEffect(state, currentPlayer, nextPlayer, tributeRevealedCards);
call    0 never executed
    #####:  864:      return 0;
        -:  865:
        -:  866:    case ambassador:
    #####:  867:      return ambassadorEffect(choice1, choice2, state, currentPlayer, handPos);
call    0 never executed
        -:  868:
        -:  869:
        -:  870:    case cutpurse:
        -:  871:
    #####:  872:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  873:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  874:	{
    #####:  875:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  876:	    {
    #####:  877:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  878:		{
    #####:  879:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  880:		    {
    #####:  881:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  882:		      break;
        -:  883:		    }
    #####:  884:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  885:		    {
    #####:  886:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  887:			{
        -:  888:			  if (DEBUG)
        -:  889:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  890:			}
    #####:  891:		      break;
        -:  892:		    }
        -:  893:		}
        -:  894:
        -:  895:	    }
        -:  896:
        -:  897:	}
        -:  898:
        -:  899:      //discard played card from hand
    #####:  900:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  901:
    #####:  902:      return 0;
        -:  903:
        -:  904:
        -:  905:    case embargo:
        -:  906:      //+2 Coins
    #####:  907:      state->coins = state->coins + 2;
        -:  908:
        -:  909:      //see if selected pile is in play
    #####:  910:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  911:	{
    #####:  912:	  return -1;
        -:  913:	}
        -:  914:
        -:  915:      //add embargo token to selected supply pile
    #####:  916:      state->embargoTokens[choice1]++;
        -:  917:
        -:  918:      //trash card
    #####:  919:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  920:      return 0;
        -:  921:
        -:  922:    case outpost:
        -:  923:      //set outpost flag
    #####:  924:      state->outpostPlayed++;
        -:  925:
        -:  926:      //discard card
    #####:  927:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  928:      return 0;
        -:  929:
        -:  930:    case salvager:
        -:  931:      //+1 buy
    #####:  932:      state->numBuys++;
        -:  933:
    #####:  934:      if (choice1)
branch  0 never executed
branch  1 never executed
        -:  935:	{
        -:  936:	  //gain coins equal to trashed card
    #####:  937:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -:  938:	  //trash card
    #####:  939:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -:  940:	}
        -:  941:
        -:  942:      //discard card
    #####:  943:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  944:      return 0;
        -:  945:
        -:  946:    case sea_hag:
    #####:  947:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  948:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####:  949:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####:  950:	  state->discardCount[i]++;
    #####:  951:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  952:	}
        -:  953:      }
    #####:  954:      return 0;
        -:  955:
        -:  956:    case treasure_map:
        -:  957:      //search hand for another treasure_map
    #####:  958:      index = -1;
    #####:  959:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  960:	{
    #####:  961:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  962:	    {
    #####:  963:	      index = i;
    #####:  964:	      break;
        -:  965:	    }
        -:  966:	}
    #####:  967:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -:  968:	{
        -:  969:	  //trash both treasure cards
    #####:  970:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  971:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -:  972:
        -:  973:	  //gain 4 Gold cards
    #####:  974:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  975:	    {
    #####:  976:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -:  977:	    }
        -:  978:
        -:  979:	  //return success
    #####:  980:	  return 1;
        -:  981:	}
        -:  982:
        -:  983:      //no second treasure_map found in hand
    #####:  984:      return -1;
        -:  985:    }
        -:  986:
    #####:  987:  return -1;
        -:  988:}
        -:  989:
function discardCard called 2 returned 100% blocks executed 78%
        2:  990:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -:  991:{
        -:  992:
        -:  993:  //if card is not trashed, added to Played pile
        2:  994:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  995:    {
        -:  996:      //add card to played pile
        2:  997:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        2:  998:      state->playedCardCount++;
        -:  999:    }
        -: 1000:
        -: 1001:  //set played card to -1
        2: 1002:  state->hand[currentPlayer][handPos] = -1;
        -: 1003:
        -: 1004:  //remove card from player's hand
        2: 1005:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1006:    {
        -: 1007:      //reduce number of cards in hand
    #####: 1008:      state->handCount[currentPlayer]--;
        -: 1009:    }
        2: 1010:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1011:    {
        -: 1012:      //reduce number of cards in hand
    #####: 1013:      state->handCount[currentPlayer]--;
        -: 1014:    }
        -: 1015:  else
        -: 1016:    {
        -: 1017:      //replace discarded card with last card in hand
        2: 1018:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1019:      //set last card to -1
        2: 1020:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1021:      //reduce number of cards in hand
        2: 1022:      state->handCount[currentPlayer]--;
        -: 1023:    }
        -: 1024:
        2: 1025:  return 0;
        -: 1026:}
        -: 1027:
function gainCard called 32 returned 100% blocks executed 70%
       32: 1028:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1029:{
        -: 1030:  //Note: supplyPos is enum of choosen card
        -: 1031:
        -: 1032:  //check if supply pile is empty (0) or card is not used in game (-1)
       32: 1033:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1034:    {
    #####: 1035:      return -1;
        -: 1036:    }
        -: 1037:
        -: 1038:  //added card for [whoseTurn] current player:
        -: 1039:  // toFlag = 0 : add to discard
        -: 1040:  // toFlag = 1 : add to deck
        -: 1041:  // toFlag = 2 : add to hand
        -: 1042:
       32: 1043:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1044:    {
    #####: 1045:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1046:      state->deckCount[player]++;
        -: 1047:    }
       32: 1048:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1049:    {
    #####: 1050:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1051:      state->handCount[player]++;
        -: 1052:    }
        -: 1053:  else
        -: 1054:    {
       32: 1055:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       32: 1056:      state->discardCount[player]++;
        -: 1057:    }
        -: 1058:
        -: 1059:  //decrease number in supply pile
       32: 1060:  state->supplyCount[supplyPos]--;
        -: 1061:
       32: 1062:  return 0;
        -: 1063:}
        -: 1064:
function updateCoins called 42 returned 100% blocks executed 100%
       42: 1065:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1066:{
        -: 1067:  int i;
        -: 1068:
        -: 1069:  //reset coin count
       42: 1070:  state->coins = 0;
        -: 1071:
        -: 1072:  //add coins for each Treasure card in player's hand
      264: 1073:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -: 1074:    {
      222: 1075:      if (state->hand[player][i] == copper)
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
        -: 1076:	{
      101: 1077:	  state->coins += 1;
        -: 1078:	}
      121: 1079:      else if (state->hand[player][i] == silver)
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
        -: 1080:	{
       53: 1081:	  state->coins += 2;
        -: 1082:	}
       68: 1083:      else if (state->hand[player][i] == gold)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -: 1084:	{
        5: 1085:	  state->coins += 3;
        -: 1086:	}
        -: 1087:    }
        -: 1088:
        -: 1089:  //add bonus
       42: 1090:  state->coins += bonus;
        -: 1091:
       42: 1092:  return 0;
        -: 1093:}
        -: 1094:
function baronEffect called 0 returned 0% blocks executed 0%
    #####: 1095:int baronEffect(int choice1, struct gameState *state, int currentPlayer, int *bonus){
    #####: 1096:  state->numBuys--;//Increase buys by 1!        //Bug 1: it should be numBuys++
    #####: 1097:  if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1098:	int p = 0;//Iterator for hand!
    #####: 1099:	int card_not_discarded = 10;//Flag for discard set!      //Bug 2: it should be card_not_discarded = 10
    #####: 1100:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1101:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1102:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1103:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1104:	    state->discardCount[currentPlayer]++;
    #####: 1105:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1106:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1107:	    }
    #####: 1108:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1109:	    state->handCount[currentPlayer]--;
    #####: 1110:	    card_not_discarded = 0;//Exit the loop
        -: 1111:	  }
    #####: 1112:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1113:	    if(DEBUG) {
        -: 1114:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1115:	      printf("Must gain an estate if there are any\n");
        -: 1116:	    }
    #####: 1117:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1118:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1119:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1120:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1121:		isGameOver(state);
call    0 never executed
        -: 1122:	      }
        -: 1123:	    }
    #####: 1124:	    card_not_discarded = 0;//Exit the loop
        -: 1125:	  }
        -: 1126:
        -: 1127:	  else{
    #####: 1128:	    p++;//Next card
        -: 1129:	  }
        -: 1130:	}
        -: 1131:      }
        -: 1132:
        -: 1133:      else{
    #####: 1134:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1135:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1136:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1137:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1138:	    isGameOver(state);
call    0 never executed
        -: 1139:	  }
        -: 1140:	}
        -: 1141:      }
        -: 1142:
        -: 1143:
    #####: 1144:      return 0;
        -: 1145:}
        -: 1146:
        -: 1147:
function minionEffect called 0 returned 0% blocks executed 0%
    #####: 1148:int minionEffect(int choice1, int choice2, struct gameState *state, int currentPlayer, int handPos){
        -: 1149:  //+1 action
        -: 1150:      int i,j;
    #####: 1151:      state->numActions++;
        -: 1152:
        -: 1153:      //discard card from hand
    #####: 1154:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1155:
    #####: 1156:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1157:	{
    #####: 1158:	  state->coins = state->coins + 2;
        -: 1159:	}
        -: 1160:
    #####: 1161:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4      //Bug 1: it should be else if (choice2)  Bug 1: choice1
branch  0 never executed
branch  1 never executed
        -: 1162:	{
        -: 1163:	  //discard hand
    #####: 1164:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1165:	    {
    #####: 1166:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1167:	    }
        -: 1168:
        -: 1169:	  //draw 4
    #####: 1170:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1171:	    {
    #####: 1172:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1173:	    }
        -: 1174:
        -: 1175:	  //other players discard hand and redraw if hand size > 4
    #####: 1176:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1177:	    {
    #####: 1178:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1179:		{
    #####: 1180:		  if ( state->handCount[i] > 0 )           //Bug 2: it should be if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1181:		    {
        -: 1182:		      //discard hand
    #####: 1183:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1184:			{
    #####: 1185:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1186:			}
        -: 1187:
        -: 1188:		      //draw 4
    #####: 1189:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1190:			{
    #####: 1191:			  drawCard(i, state);
call    0 never executed
        -: 1192:			}
        -: 1193:		    }
        -: 1194:		}
        -: 1195:	    }
        -: 1196:
        -: 1197:	}
    #####: 1198:      return 0;
        -: 1199:}
        -: 1200:
        -: 1201:
function ambassadorEffect called 0 returned 0% blocks executed 0%
    #####: 1202:int ambassadorEffect(int choice1, int choice2, struct gameState *state, int currentPlayer, int handPos){
        -: 1203:  int i;
    #####: 1204:  int j = 0;		//used to check if player has enough cards to discard
        -: 1205:
    #####: 1206:      if (choice2 > 6 || choice2 < 0)      //Bug 1: it should be if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1207:	{
    #####: 1208:	  return -1;
        -: 1209:	}
        -: 1210:
    #####: 1211:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1212:	{
    #####: 1213:	  return -1;
        -: 1214:	}
        -: 1215:
    #####: 1216:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1217:	{
    #####: 1218:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1219:	    {
    #####: 1220:	      j++;
        -: 1221:	    }
        -: 1222:	}
    #####: 1223:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1224:	{
    #####: 1225:	  return -1;
        -: 1226:	}
        -: 1227:
        -: 1228:      if (DEBUG)
        -: 1229:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1230:
        -: 1231:      //increase supply count for choosen card by amount being discarded
    #####: 1232:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1233:
        -: 1234:      //each other player gains a copy of revealed card
    #####: 1235:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1236:	{
    #####: 1237:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1238:	    {
    #####: 1239:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1240:	    }
        -: 1241:	}
        -: 1242:
        -: 1243:      //discard played card from hand
    #####: 1244:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1245:
        -: 1246:      //trash copies of cards returned to supply
    #####: 1247:      for (j = 0; j < 100; j++)          //Bug 2: it should be for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1248:	{
    #####: 1249:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1250:	    {
    #####: 1251:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1252:		{
    #####: 1253:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1254:		  break;
        -: 1255:		}
        -: 1256:	    }
        -: 1257:	}
        -: 1258:
    #####: 1259:      return 0;
        -: 1260:}
        -: 1261:
        -: 1262:
function tributeEffect called 0 returned 0% blocks executed 0%
    #####: 1263:void tributeEffect(struct gameState *state, int currentPlayer, int nextPlayer, int tributeRevealedCards[2]){
        -: 1264:  int i;
    #####: 1265:  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1266:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1267:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1268:	  state->deckCount[nextPlayer]--;
        -: 1269:	}
    #####: 1270:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1271:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1272:	  state->discardCount[nextPlayer]--;
        -: 1273:	}
        -: 1274:	else{
        -: 1275:	  //No Card to Reveal
        -: 1276:	  if (DEBUG){
        -: 1277:	    printf("No cards to reveal\n");
        -: 1278:	  }
        -: 1279:	}
        -: 1280:      }
        -: 1281:
        -: 1282:      else{
    #####: 1283:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1284:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1285:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1286:	    state->deckCount[nextPlayer]++;
    #####: 1287:	    state->discard[nextPlayer][i] = -1;
    #####: 1288:	    state->discardCount[nextPlayer]--;
        -: 1289:	  }
        -: 1290:
    #####: 1291:	  shuffle(nextPlayer,state);//Shuffle the deck     //Bug 1: it should be shuffle(nextPlayer,state);
call    0 never executed
        -: 1292:	}
    #####: 1293:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1294:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1295:	state->deckCount[nextPlayer]--;
    #####: 1296:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1297:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1298:	state->deckCount[nextPlayer]--;
        -: 1299:      }
        -: 1300:
    #####: 1301:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one   //Bug 1: it should be tributeRevealedCards[0] == tributeRevealedCards[1];
branch  0 never executed
branch  1 never executed
    #####: 1302:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1303:	state->playedCardCount++;
    #####: 1304:	tributeRevealedCards[1] = -1;
        -: 1305:      }
        -: 1306:
    #####: 1307:      for (i = 0; i <= 10; i ++){            //Bug 2: it should be for (i = 0; i <= 2; i ++)
branch  0 never executed
branch  1 never executed
    #####: 1308:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1309:	  state->coins += 2;
        -: 1310:	}
        -: 1311:
    #####: 1312:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1313:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1314:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1315:	}
        -: 1316:	else{//Action Card
    #####: 1317:	  state->numActions = state->numActions + 2;
        -: 1318:	}
        -: 1319:      }
        -: 1320:
    #####: 1321:}
        -: 1322:
        -: 1323:
function mineEffect called 0 returned 0% blocks executed 0%
    #####: 1324:int mineEffect(int choice1, int choice2, struct gameState *state, int currentPlayer, int handPos, int nextPlayer){
        -: 1325:  int i, j;
    #####: 1326:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1327:
    #####: 1328:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1329:	{
    #####: 1330:	  return -1;
        -: 1331:	}
        -: 1332:
    #####: 1333:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1334:	{
    #####: 1335:	  return -1;
        -: 1336:	}
        -: 1337:
    #####: 1338:      if ( (getCost(state->hand[currentPlayer][choice1]) + 7) > getCost(choice2) )         //Bug 2: it should be if ( (getCost(state->hand[currentPlayer][choice1]) + 3)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1339:	{
    #####: 1340:	  return -1;
        -: 1341:	}
        -: 1342:
    #####: 1343:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1344:
        -: 1345:      //discard card from hand
    #####: 1346:      discardCard(handPos, nextPlayer, state, 0);        //Bug 1: it should be discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1347:
        -: 1348:      //discard trashed card
    #####: 1349:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1350:	{
    #####: 1351:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1352:	    {
    #####: 1353:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1354:	      break;
        -: 1355:	    }
        -: 1356:	}
        -: 1357:
    #####: 1358:      return 0;
        -: 1359:}
        -: 1360:
        -: 1361://end of dominion.c
