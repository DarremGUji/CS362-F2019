        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
function compare called 624 returned 100% blocks executed 100%
      624:    9:int compare(const void* a, const void* b) {
      624:   10:  if (*(int*)a > *(int*)b)
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
      304:   11:    return 1;
      320:   12:  if (*(int*)a < *(int*)b)
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
       90:   13:    return -1;
      230:   14:  return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState* newGame() {
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
function initializeGame called 1 returned 100% blocks executed 88%
        1:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;			
        -:   44:  //set up random number generator
        1:   45:  SelectStream(1);
call    0 returned 100%
        1:   46:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   47:  
        -:   48:  //check number of players
        1:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   50:    {
    #####:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
        1:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
       11:   58:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   59:    {
      110:   60:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   61:        {
      100:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   63:	    {
    #####:   64:	      return -1;
        -:   65:	    }
        -:   66:        }
        -:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
        1:   74:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   75:    {
        1:   76:      state->supplyCount[curse] = 10;
        -:   77:    }
    #####:   78:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   79:    {
    #####:   80:      state->supplyCount[curse] = 20;
        -:   81:    }
        -:   82:  else
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
        1:   88:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   89:    {
        1:   90:      state->supplyCount[estate] = 8;
        1:   91:      state->supplyCount[duchy] = 8;
        1:   92:      state->supplyCount[province] = 8;
        -:   93:    }
        -:   94:  else
        -:   95:    {
    #####:   96:      state->supplyCount[estate] = 12;
    #####:   97:      state->supplyCount[duchy] = 12;
    #####:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
        1:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  103:  state->supplyCount[silver] = 40;
        1:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
       21:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  108:    {
      165:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  110:	{
      155:  111:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
       10:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  115:		{
        2:  116:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  117:		    state->supplyCount[i] = 8; 
        -:  118:		  }
    #####:  119:		  else{ state->supplyCount[i] = 12; }
        -:  120:		}
        -:  121:	      else
        -:  122:		{
        9:  123:		  state->supplyCount[i] = 10;
        -:  124:		}
       10:  125:	      break;
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
      145:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
        -:  131:	}
        -:  132:
        -:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
        3:  139:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  140:    {
        2:  141:      state->deckCount[i] = 0;
        8:  142:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  143:	{
        6:  144:	  state->deck[i][j] = estate;
        6:  145:	  state->deckCount[i]++;
        -:  146:	}
       16:  147:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  148:	{
       14:  149:	  state->deck[i][j] = copper;
       14:  150:	  state->deckCount[i]++;		
        -:  151:	}
        -:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
        3:  155:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  156:    {
        2:  157:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
        -:  161:    }
        -:  162:
        -:  163:  //draw player hands
        3:  164:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  165:    {  
        -:  166:      //initialize hand size to zero
        2:  167:      state->handCount[i] = 0;
        2:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
        -:  170:      // for (j = 0; j < 5; j++)
        -:  171:      //	{
        -:  172:      //	  drawCard(i, state);
        -:  173:      //	}
        -:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
       28:  177:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  178:    {
       27:  179:      state->embargoTokens[i] = 0;
        -:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
        1:  183:  state->outpostPlayed = 0;
        1:  184:  state->phase = 0;
        1:  185:  state->numActions = 1;
        1:  186:  state->numBuys = 1;
        1:  187:  state->playedCardCount = 0;
        1:  188:  state->whoseTurn = 0;
        1:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
        6:  193:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  194:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  195:  }
        -:  196:
        1:  197:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  198:
        1:  199:  return 0;
        -:  200:}
        -:  201:
function shuffle called 15 returned 100% blocks executed 94%
       15:  202:int shuffle(int player, struct gameState *state) {
        -:  203: 
        -:  204:
        -:  205:  int newDeck[MAX_DECK];
       15:  206:  int newDeckPos = 0;
        -:  207:  int card;
        -:  208:  int i;
        -:  209:
       15:  210:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  211:    return -1;
       15:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
      252:  215:  while (state->deckCount[player] > 0) {
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
      222:  216:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      222:  217:    newDeck[newDeckPos] = state->deck[player][card];
      222:  218:    newDeckPos++;
     1142:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 81%
branch  1 taken 19% (fallthrough)
      920:  220:      state->deck[player][i] = state->deck[player][i+1];
        -:  221:    }
      222:  222:    state->deckCount[player]--;
        -:  223:  }
      237:  224:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
      222:  225:    state->deck[player][i] = newDeck[i];
      222:  226:    state->deckCount[player]++;
        -:  227:  }
        -:  228:
       15:  229:  return 0;
        -:  230:}
        -:  231:
function playCard called 43 returned 100% blocks executed 80%
       43:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  233:{	
        -:  234:  int card;
       43:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
       43:  238:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:	
        -:  243:  //check if player has enough actions
       43:  244:  if ( state->numActions < 1 )
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
        -:  245:    {
       36:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //get card played
        7:  250:  card = handCard(handPos, state);
call    0 returned 100%
        -:  251:	
        -:  252:  //check if selected card is an action
        7:  253:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //play card
        7:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //reduce number of actions
        7:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
        7:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  269:	
        7:  270:  return 0;
        -:  271:}
        -:  272:
function buyCard called 36 returned 100% blocks executed 79%
       36:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
        -:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
       36:  281:  who = state->whoseTurn;
        -:  282:
       36:  283:  if (state->numBuys < 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
    #####:  286:    return -1;
       36:  287:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
    #####:  290:    return -1;
       36:  291:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  292:    if (DEBUG) 
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:    return -1;
        -:  295:  } else {
       36:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
       36:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  299:  
       36:  300:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
       36:  301:    state->numBuys--;
        -:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:    
       36:  309:  return 0;
        -:  310:}
        -:  311:
function numHandCards called 272 returned 100% blocks executed 100%
      272:  312:int numHandCards(struct gameState *state) {
      272:  313:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  314:}
        -:  315:
function handCard called 550 returned 100% blocks executed 100%
      550:  316:int handCard(int handPos, struct gameState *state) {
      550:  317:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
      550:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
function supplyCount called 72 returned 100% blocks executed 100%
       72:  321:int supplyCount(int card, struct gameState *state) {
       72:  322:  return state->supplyCount[card];
        -:  323:}
        -:  324:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:  int i;
    #####:  327:  int count = 0;
        -:  328:
    #####:  329:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  330:    {
    #####:  331:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  332:    }
        -:  333:
    #####:  334:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  335:    {
    #####:  336:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  340:    {
    #####:  341:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  342:    }
        -:  343:
    #####:  344:  return count;
        -:  345:}
        -:  346:
function whoseTurn called 901 returned 100% blocks executed 100%
      901:  347:int whoseTurn(struct gameState *state) {
      901:  348:  return state->whoseTurn;
        -:  349:}
        -:  350:
function endTurn called 36 returned 100% blocks executed 100%
       36:  351:int endTurn(struct gameState *state) {
        -:  352:  int k;
        -:  353:  int i;
       36:  354:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  355:  
        -:  356:  //Discard hand
      230:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
      194:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      194:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  360:  }
       36:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:    
        -:  363:  //Code for determining the player
       36:  364:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
       18:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  366:  }
        -:  367:  else{
       18:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:  }
        -:  370:
       36:  371:  state->outpostPlayed = 0;
       36:  372:  state->phase = 0;
       36:  373:  state->numActions = 1;
       36:  374:  state->coins = 0;
       36:  375:  state->numBuys = 1;
       36:  376:  state->playedCardCount = 0;
       36:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
      216:  381:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      180:  382:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  383:  }
        -:  384:
        -:  385:  //Update money
       36:  386:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  387:
       36:  388:  return 0;
        -:  389:}
        -:  390:
function isGameOver called 37 returned 100% blocks executed 82%
       37:  391:int isGameOver(struct gameState *state) {
        -:  392:  int i;
        -:  393:  int j;
        -:  394:	
        -:  395:  //if stack of Province cards is empty, the game ends
       37:  396:  if (state->supplyCount[province] == 0)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  397:    {
        1:  398:      return 1;
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
       36:  402:  j = 0;
      936:  403:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  404:    {
      900:  405:      if (state->supplyCount[i] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  406:	{
    #####:  407:	  j++;
        -:  408:	}
        -:  409:    }
       36:  410:  if ( j >= 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  411:    {
    #####:  412:      return 1;
        -:  413:    }
        -:  414:
       36:  415:  return 0;
        -:  416:}
        -:  417:
function scoreFor called 2 returned 100% blocks executed 70%
        2:  418:int scoreFor (int player, struct gameState *state) {
        -:  419:
        -:  420:  int i;
        2:  421:  int score = 0;
        -:  422:  //score from hand
        7:  423:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  424:    {
        5:  425:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  426:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  427:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  428:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        5:  429:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  430:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  431:    }
        -:  432:
        -:  433:  //score from discard
       34:  434:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  435:    {
       32:  436:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       32:  437:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
       32:  438:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       32:  439:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
       32:  440:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       32:  441:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  442:    }
        -:  443:
        -:  444:  //score from deck
       34:  445:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  446:    {
       32:  447:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
       32:  448:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
       32:  449:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       32:  450:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
       32:  451:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       32:  452:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  453:    }
        -:  454:
        2:  455:  return score;
        -:  456:}
        -:  457:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:  int i;	
        -:  460:  int j;
        -:  461:  int highScore;
        -:  462:  int currentPlayer;
        -:  463:
        -:  464:  //get score for each player
    #####:  465:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  466:    {
        -:  467:      //set unused player scores to -9999
    #####:  468:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  469:	{
    #####:  470:	  players[i] = -9999;
        -:  471:	}
        -:  472:      else
        -:  473:	{
    #####:  474:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  475:	}
        -:  476:    }
        -:  477:
        -:  478:  //find highest score
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  481:    {
    #####:  482:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  483:	{
    #####:  484:	  j = i;
        -:  485:	}
        -:  486:    }
    #####:  487:  highScore = players[j];
        -:  488:
        -:  489:  //add 1 to players who had less turns
    #####:  490:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  492:    {
    #####:  493:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  494:	{
    #####:  495:	  players[i]++;
        -:  496:	}
        -:  497:    }
        -:  498:
        -:  499:  //find new highest score
    #####:  500:  j = 0;
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  502:    {
    #####:  503:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  504:	{
    #####:  505:	  j = i;
        -:  506:	}
        -:  507:    }
    #####:  508:  highScore = players[j];
        -:  509:
        -:  510:  //set winners in array to 1 and rest to 0
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  512:    {
    #####:  513:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  514:	{
    #####:  515:	  players[i] = 1;
        -:  516:	}
        -:  517:      else
        -:  518:	{
    #####:  519:	  players[i] = 0;
        -:  520:	}
        -:  521:    }
        -:  522:
    #####:  523:  return 0;
        -:  524:}
        -:  525:
function drawCard called 205 returned 100% blocks executed 92%
      205:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	int count;
        -:  528:  int deckCounter;
      205:  529:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
      215:  534:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
      202:  535:      state->deck[player][i] = state->discard[player][i];
      202:  536:      state->discard[player][i] = -1;
        -:  537:    }
        -:  538:
       13:  539:    state->deckCount[player] = state->discardCount[player];
       13:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
       13:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  544:   
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
       13:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
       13:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
       13:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
       13:  560:    if (deckCounter == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  561:      return -1;
        -:  562:
       13:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       13:  564:    state->deckCount[player]--;
       13:  565:    state->handCount[player]++;//Increment hand count
        -:  566:  }
        -:  567:
        -:  568:  else{
      192:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
      192:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
      192:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      192:  577:    state->deckCount[player]--;
      192:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
      205:  581:  return 0;
        -:  582:}
        -:  583:
function getCost called 72 returned 100% blocks executed 23%
       72:  584:int getCost(int cardNumber)
        -:  585:{
       72:  586:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 22%
branch  4 taken 0%
branch  5 taken 36%
branch  6 taken 31%
branch  7 taken 6%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 6%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  587:    {
        -:  588:    case curse:
    #####:  589:      return 0;
        -:  590:    case estate:
    #####:  591:      return 2;
        -:  592:    case duchy:
    #####:  593:      return 5;
        -:  594:    case province:
       16:  595:      return 8;
        -:  596:    case copper:
    #####:  597:      return 0;
        -:  598:    case silver:
       26:  599:      return 3;
        -:  600:    case gold:
       22:  601:      return 6;
        -:  602:    case adventurer:
        4:  603:      return 6;
        -:  604:    case council_room:
    #####:  605:      return 5;
        -:  606:    case feast:
    #####:  607:      return 4;
        -:  608:    case gardens:
    #####:  609:      return 4;
        -:  610:    case mine:
    #####:  611:      return 5;
        -:  612:    case remodel:
    #####:  613:      return 4;
        -:  614:    case smithy:
        4:  615:      return 4;
        -:  616:    case village:
    #####:  617:      return 3;
        -:  618:    case baron:
    #####:  619:      return 4;
        -:  620:    case great_hall:
    #####:  621:      return 3;
        -:  622:    case minion:
    #####:  623:      return 5;
        -:  624:    case steward:
    #####:  625:      return 3;
        -:  626:    case tribute:
    #####:  627:      return 5;
        -:  628:    case ambassador:
    #####:  629:      return 3;
        -:  630:    case cutpurse:
    #####:  631:      return 4;
        -:  632:    case embargo: 
    #####:  633:      return 2;
        -:  634:    case outpost:
    #####:  635:      return 5;
        -:  636:    case salvager:
    #####:  637:      return 4;
        -:  638:    case sea_hag:
    #####:  639:      return 4;
        -:  640:    case treasure_map:
    #####:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
        -:  645:}
        -:  646:
function cardEffect called 7 returned 100% blocks executed 18%
        7:  647:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  648:{
        -:  649:  int i;
        -:  650:  int j;
        -:  651:  int k;
        -:  652:  int x;
        -:  653:  int index;
        7:  654:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        7:  655:  int nextPlayer = currentPlayer + 1;
        -:  656:
        7:  657:  int tributeRevealedCards[2] = {-1, -1};
        -:  658:  int temphand[MAX_HAND];// moved above the if statement
        7:  659:  int drawntreasure=0;
        -:  660:  int cardDrawn;
        7:  661:  int z = 0;// this is the counter for the temp hand
        7:  662:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
        5:  663:    nextPlayer = 0;
        -:  664:  }
        -:  665:  
        -:  666:	
        -:  667:  //uses switch to select card and perform actions
        7:  668:  switch( card ) 
branch  0 taken 71%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 29%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  669:    {
        -:  670:    case adventurer:
       24:  671:      while(drawntreasure<2){
branch  0 taken 74%
branch  1 taken 26% (fallthrough)
       14:  672:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  673:	  shuffle(currentPlayer, state);
call    0 never executed
        -:  674:	}
       14:  675:	drawCard(currentPlayer, state);
call    0 returned 100%
       14:  676:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       14:  677:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
branch  2 taken 56% (fallthrough)
branch  3 taken 44%
branch  4 taken 20% (fallthrough)
branch  5 taken 80%
       10:  678:	  drawntreasure++;
        -:  679:	else{
        4:  680:	  temphand[z]=cardDrawn;
        4:  681:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        4:  682:	  z++;
        -:  683:	}
        -:  684:      }
       14:  685:      while(z-1>=0){
branch  0 taken 44%
branch  1 taken 56% (fallthrough)
        4:  686:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        4:  687:	z=z-1;
        -:  688:      }
        5:  689:      return 0;
        -:  690:			
        -:  691:    case council_room:
        -:  692:      //+4 Cards
    #####:  693:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  694:	{
    #####:  695:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  696:	}
        -:  697:			
        -:  698:      //+1 Buy
    #####:  699:      state->numBuys++;
        -:  700:			
        -:  701:      //Each other player draws a card
    #####:  702:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  703:	{
    #####:  704:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  705:	    {
    #####:  706:	      drawCard(i, state);
call    0 never executed
        -:  707:	    }
        -:  708:	}
        -:  709:			
        -:  710:      //put played card in played card pile
    #####:  711:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  712:			
    #####:  713:      return 0;
        -:  714:			
        -:  715:    case feast:
        -:  716:      //gain card with cost up to 5
        -:  717:      //Backup hand
    #####:  718:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  719:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  720:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  721:      }
        -:  722:      //Backup hand
        -:  723:
        -:  724:      //Update Coins for Buy
    #####:  725:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  726:      x = 1;//Condition to loop on
    #####:  727:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  728:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  729:	  if (DEBUG)
        -:  730:	    printf("None of that card left, sorry!\n");
        -:  731:
        -:  732:	  if (DEBUG){
        -:  733:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  734:	  }
        -:  735:	}
    #####:  736:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  737:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  738:
        -:  739:	  if (DEBUG){
        -:  740:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  741:	  }
        -:  742:	}
        -:  743:	else{
        -:  744:
        -:  745:	  if (DEBUG){
        -:  746:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  747:	  }
        -:  748:
    #####:  749:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  750:	  x = 0;//No more buying cards
        -:  751:
        -:  752:	  if (DEBUG){
        -:  753:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  754:	  }
        -:  755:
        -:  756:	}
        -:  757:      }     
        -:  758:
        -:  759:      //Reset Hand
    #####:  760:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  761:	state->hand[currentPlayer][i] = temphand[i];
    #####:  762:	temphand[i] = -1;
        -:  763:      }
        -:  764:      //Reset Hand
        -:  765:      			
    #####:  766:      return 0;
        -:  767:			
        -:  768:    case gardens:
    #####:  769:      return -1;
        -:  770:			
        -:  771:    case mine:
    #####:  772:      Mine(choice1, choice2, currentPlayer, state, handPos);
call    0 never executed
        -:  773:
        -:  774:    case remodel:
    #####:  775:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  776:
    #####:  777:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  778:      {
    #####:  779:	 return -1;
        -:  780:      }
        -:  781:
    #####:  782:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  783:
        -:  784:      //discard card from hand
    #####:  785:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  786:
        -:  787:      //discard trashed card
    #####:  788:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  789:      {
    #####:  790:	 if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  791:	 {
    #####:  792:	    discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  793:	    break;
        -:  794:	 }
        -:  795:      }
        -:  796:
        -:  797:
    #####:  798:      return 0;
        -:  799:
        -:  800:    case smithy:
        -:  801:      //+3 Cards
        8:  802:      for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  803:      {
        6:  804:	 drawCard(currentPlayer, state);
call    0 returned 100%
        -:  805:      }
        -:  806:
        -:  807:      //discard card from hand
        2:  808:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  809:      return 0;
        -:  810:
        -:  811:    case village:
        -:  812:      //+1 Card
    #####:  813:      drawCard(currentPlayer, state);
call    0 never executed
        -:  814:
        -:  815:      //+2 Actions
    #####:  816:      state->numActions = state->numActions + 2;
        -:  817:
        -:  818:      //discard played card from hand
    #####:  819:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  820:      return 0;
        -:  821:
        -:  822:    case baron:
    #####:  823:      Baron(choice1, state, currentPlayer);
call    0 never executed
        -:  824:
        -:  825:    case great_hall:
        -:  826:      //+1 Card
    #####:  827:      drawCard(currentPlayer, state);
call    0 never executed
        -:  828:
        -:  829:      //+1 Actions
    #####:  830:      state->numActions++;
        -:  831:
        -:  832:      //discard card from hand
    #####:  833:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  834:      return 0;
        -:  835:
        -:  836:    case minion:
    #####:  837:      Minion(choice1, choice2, state, handPos, currentPlayer);
call    0 never executed
        -:  838:
        -:  839:    case steward:
    #####:  840:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  841:      {
        -:  842:	 //+2 cards
    #####:  843:	 drawCard(currentPlayer, state);
call    0 never executed
    #####:  844:	 drawCard(currentPlayer, state);
call    0 never executed
        -:  845:      }
    #####:  846:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  847:      {
        -:  848:	 //+2 coins
    #####:  849:	 state->coins = state->coins + 2;
        -:  850:      }
        -:  851:      else
        -:  852:      {
        -:  853:	 //trash 2 cards in hand
    #####:  854:	 discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  855:	 discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  856:      }
        -:  857:
        -:  858:      //discard card from hand
    #####:  859:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  860:      return 0;
        -:  861:
        -:  862:    case tribute:
    #####:  863:      Tribute(currentPlayer, nextPlayer, tributeRevealedCards, state, handPos);
call    0 never executed
        -:  864:
        -:  865:    case ambassador:
    #####:  866:      Ambassador(choice1, choice2, state, handPos, currentPlayer);
call    0 never executed
        -:  867:
        -:  868:    case cutpurse:
        -:  869:
    #####:  870:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  871:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  872:      {
    #####:  873:	 if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  874:	 {
    #####:  875:	    for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  876:	    {
    #####:  877:	       if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  878:	       {
    #####:  879:		  discardCard(j, i, state, 0);
call    0 never executed
    #####:  880:		  break;
        -:  881:	       }
    #####:  882:	       if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  883:	       {
    #####:  884:		  for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  885:		  {
        -:  886:		     if (DEBUG)
        -:  887:			printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  888:		  }	
    #####:  889:		  break;
        -:  890:	       }		
        -:  891:	    }
        -:  892:
        -:  893:	 }
        -:  894:
        -:  895:      }				
        -:  896:
        -:  897:      //discard played card from hand
    #####:  898:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  899:
    #####:  900:      return 0;
        -:  901:
        -:  902:
        -:  903:    case embargo: 
        -:  904:      //+2 Coins
    #####:  905:      state->coins = state->coins + 2;
        -:  906:
        -:  907:      //see if selected pile is in play
    #####:  908:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  909:      {
    #####:  910:	 return -1;
        -:  911:      }
        -:  912:
        -:  913:      //add embargo token to selected supply pile
    #####:  914:      state->embargoTokens[choice1]++;
        -:  915:
        -:  916:      //trash card
    #####:  917:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####:  918:      return 0;
        -:  919:
        -:  920:    case outpost:
        -:  921:      //set outpost flag
    #####:  922:      state->outpostPlayed++;
        -:  923:
        -:  924:      //discard card
    #####:  925:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  926:      return 0;
        -:  927:
        -:  928:    case salvager:
        -:  929:      //+1 buy
    #####:  930:      state->numBuys++;
        -:  931:
    #####:  932:      if (choice1)
branch  0 never executed
branch  1 never executed
        -:  933:      {
        -:  934:	 //gain coins equal to trashed card
    #####:  935:	 state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -:  936:	 //trash card
    #####:  937:	 discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -:  938:      }
        -:  939:
        -:  940:      //discard card
    #####:  941:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  942:      return 0;
        -:  943:
        -:  944:    case sea_hag:
    #####:  945:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  946:	 if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####:  947:	    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####:  948:	    state->discardCount[i]++;
    #####:  949:	    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  950:	 }
        -:  951:      }
    #####:  952:      return 0;
        -:  953:
        -:  954:    case treasure_map:
        -:  955:      //search hand for another treasure_map
    #####:  956:      index = -1;
    #####:  957:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  958:      {
    #####:  959:	 if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  960:	 {
    #####:  961:	    index = i;
    #####:  962:	    break;
        -:  963:	 }
        -:  964:      }
    #####:  965:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -:  966:      {
        -:  967:	 //trash both treasure cards
    #####:  968:	 discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  969:	 discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -:  970:
        -:  971:	 //gain 4 Gold cards
    #####:  972:	 for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  973:	 {
    #####:  974:	    gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -:  975:	 }
        -:  976:
        -:  977:	 //return success
    #####:  978:	 return 1;
        -:  979:      }
        -:  980:
        -:  981:      //no second treasure_map found in hand
    #####:  982:      return -1;
        -:  983:    }
        -:  984:
    #####:  985:  return -1;
        -:  986:}
        -:  987:
function discardCard called 2 returned 100% blocks executed 78%
        2:  988:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -:  989:{
        -:  990: //if card is not trashed, added to Played pile 
        2:  991:   if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  992:   {
        -:  993:      //add card to played pile
        2:  994:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2:  995:      state->playedCardCount++;
        -:  996:   }
        -:  997:
        -:  998:   //set played card to -1
        2:  999:   state->hand[currentPlayer][handPos] = -1;
        -: 1000:   //remove card from player's hand
        2: 1001:   if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1002:   {
        -: 1003:      //reduce number of cards in hand
    #####: 1004:      state->handCount[currentPlayer]--;
        -: 1005:   }
        2: 1006:   else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1007:   {
        -: 1008:      //reduce number of cards in hand
    #####: 1009:      state->handCount[currentPlayer]--;
        -: 1010:   }
        -: 1011:   else 	
        -: 1012:   {
        -: 1013:      //replace discarded card with last card in hand
        -: 1014:
        -: 1015:      //Line in question is below, specifically I believe (state->handCount[currentPlayer - 1) is acessing invalid memory 
        -: 1016:      //I don't understand why the handCount for the current player is accessing bad memory
        -: 1017:      // before it gets to this function I am sure the handcount is at 1
        -: 1018:      		//printf("Hand count value should be 0 at the end:  %d\n", state->handCount[currentPlayer]);
        2: 1019:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1020:      //set last card to -1
        2: 1021:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1022:      //reduce number of cards in hand
        2: 1023:      state->handCount[currentPlayer]--;
        -: 1024:   }
        2: 1025:   return 0;
        -: 1026:
        -: 1027:}
        -: 1028:
function gainCard called 36 returned 100% blocks executed 70%
       36: 1029:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1030:{
        -: 1031:   //Note: supplyPos is enum of choosen card
        -: 1032:
        -: 1033:   //check if supply pile is empty (0) or card is not used in game (-1)
       36: 1034:   if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1035:   {
    #####: 1036:      return -1;
        -: 1037:   }
        -: 1038:
        -: 1039:   //added card for [whoseTurn] current player:
        -: 1040:   // toFlag = 0 : add to discard
        -: 1041:   // toFlag = 1 : add to deck
        -: 1042:   // toFlag = 2 : add to hand
        -: 1043:
       36: 1044:   if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1045:   {
    #####: 1046:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1047:      state->deckCount[player]++;
        -: 1048:   }
       36: 1049:   else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1050:   {
    #####: 1051:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1052:      state->handCount[player]++;
        -: 1053:   }
        -: 1054:   else
        -: 1055:   {
       36: 1056:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       36: 1057:      state->discardCount[player]++;
        -: 1058:   }
        -: 1059:
        -: 1060:   //decrease number in supply pile
       36: 1061:   state->supplyCount[supplyPos]--;
        -: 1062:
       36: 1063:   return 0;
        -: 1064:}
        -: 1065:
function updateCoins called 44 returned 100% blocks executed 100%
       44: 1066:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1067:{
        -: 1068:   int i;
        -: 1069:
        -: 1070:   //reset coin count
       44: 1071:   state->coins = 0;
        -: 1072:
        -: 1073:   //add coins for each Treasure card in player's hand
      278: 1074:   for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -: 1075:   {
      234: 1076:      if (state->hand[player][i] == copper)
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
        -: 1077:      {
      102: 1078:	 state->coins += 1;
        -: 1079:      }
      132: 1080:      else if (state->hand[player][i] == silver)
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
        -: 1081:      {
       42: 1082:	 state->coins += 2;
        -: 1083:      }
       90: 1084:      else if (state->hand[player][i] == gold)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
        -: 1085:      {
       24: 1086:	 state->coins += 3;
        -: 1087:      }	
        -: 1088:   }	
        -: 1089:
        -: 1090:   //add bonus
       44: 1091:   state->coins += bonus;
        -: 1092:
       44: 1093:   return 0;
        -: 1094:}
        -: 1095:
        -: 1096://end of dominion.c
function Baron called 0 returned 0% blocks executed 0%
    #####: 1097:int Baron(int choice1, struct gameState *state, int currentPlayer){
    #####: 1098:   state->numBuys++;//Increase buys by 1!
    #####: 1099:   if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1100:      int p = 0;//Iterator for hand!
    #####: 1101:      int card_not_discarded = 1;//Flag for discard set!
    #####: 1102:      while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1103:	 if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1104:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1105:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        -: 1106:	    //state->discardCount[currentPlayer]++;
    #####: 1107:	    state->discardCount[currentPlayer]--; //bug introduced
        -: 1108:
    #####: 1109:	    for (p = 0; p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1110:	       state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1111:	    }
    #####: 1112:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1113:	    state->handCount[currentPlayer]--;
    #####: 1114:	    card_not_discarded = 0;//Exit the loop
        -: 1115:	 }
    #####: 1116:	 else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1117:	    if(DEBUG) {
        -: 1118:	       printf("No estate cards in your hand, invalid choice\n");
        -: 1119:	       printf("Must gain an estate if there are any\n");
        -: 1120:	    }
    #####: 1121:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1122:	       gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1123:	       gainCard(duchy, state, 0, currentPlayer); //bug introduced
call    0 never executed
    #####: 1124:	       state->supplyCount[estate]--;//Decrement estates
    #####: 1125:	       state->supplyCount[duchy]--;//Decrement duchy, bug introduced
    #####: 1126:	       if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1127:
    #####: 1128:		  isGameOver(state);
call    0 never executed
        -: 1129:	       }
        -: 1130:	    }
    #####: 1131:	    card_not_discarded = 0;//Exit the loop
        -: 1132:	 }
        -: 1133:
        -: 1134:	 else{
    #####: 1135:	    p++;//Next card
        -: 1136:	 }
        -: 1137:      }
        -: 1138:   }
        -: 1139:   else{
    #####: 1140:      if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1141:	 gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1142:	 state->supplyCount[estate]--;//Decrement Estates
    #####: 1143:	 if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1144:	    isGameOver(state);
call    0 never executed
        -: 1145:	 }
        -: 1146:      }
        -: 1147:   }
    #####: 1148:   return 0;
        -: 1149:}
        -: 1150:/*
        -: 1151:   void discardEstate(int currentPlayer, struct gameState *state){
        -: 1152:   int p = 0;//Iterator for hand!
        -: 1153:   int card_not_discarded = 1;//Flag for discard set!
        -: 1154:   while(card_not_discarded){
        -: 1155:   if (state->hand[currentPlayer][p] == estate){//Found an estate card!
        -: 1156:   state->coins += 4;//Add 4 coins to the amount of coins
        -: 1157:   state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        -: 1158://state->discardCount[currentPlayer]++;
        -: 1159:state->discardCount[currentPlayer]--; //bug introduced
        -: 1160:
        -: 1161:for (p = 0; p < state->handCount[currentPlayer]; p++){
        -: 1162:state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1163:}
        -: 1164:state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        -: 1165:state->handCount[currentPlayer]--;
        -: 1166:card_not_discarded = 0;//Exit the loop
        -: 1167:}
        -: 1168:else if (p > state->handCount[currentPlayer]){
        -: 1169:if(DEBUG) {
        -: 1170:printf("No estate cards in your hand, invalid choice\n");
        -: 1171:printf("Must gain an estate if there are any\n");
        -: 1172:}
        -: 1173:if (supplyCount(estate, state) > 0){
        -: 1174:gainCard(estate, state, 0, currentPlayer);
        -: 1175:gainCard(duchy, state, 0, currentPlayer); //bug introduced
        -: 1176:state->supplyCount[estate]--;//Decrement estates
        -: 1177:state->supplyCount[duchy]--;//Decrement duchy, bug introduced
        -: 1178:if (supplyCount(estate, state) == 0){
        -: 1179:
        -: 1180:isGameOver(state);
        -: 1181:}
        -: 1182:}
        -: 1183:card_not_discarded = 0;//Exit the loop
        -: 1184:}
        -: 1185:
        -: 1186:else{
        -: 1187:p++;//Next card
        -: 1188:}
        -: 1189:}
        -: 1190:}
        -: 1191:*/
function Minion called 0 returned 0% blocks executed 0%
    #####: 1192:int Minion(int choice1, int choice2, struct gameState *state, int handPos, int currentPlayer){
        -: 1193:   int i, j;
        -: 1194:   //+1 action
    #####: 1195:   state->numActions++;
        -: 1196:
        -: 1197:   //discard card from hand
    #####: 1198:   discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1199:   if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1200:   {
    #####: 1201:      state->numActions--; //Introduced bug, decreased action
    #####: 1202:      state->numActions--; //Decrease action a second time
    #####: 1203:      state->coins = state->coins + 4; //Introduced bug, Doubled the amount of coins
        -: 1204:   }
        -: 1205:
    #####: 1206:   else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1207:   {
        -: 1208:      //discard hand
        -: 1209:      //discardHand(currentPlayer, handPos, state); //This function is broken I replaced it with original code
        -: 1210:      //I'm sure it's breaking here somewhere but I don't understand why
    #####: 1211:      while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1212:      {
    #####: 1213:	 discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1214:      }
        -: 1215:
        -: 1216:      //draw 4
        -: 1217:      //drawMultCards(currentPlayer, 4, state); //Replaced to original code in case something is wrong 
    #####: 1218:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1219:      {
    #####: 1220:	 drawCard(currentPlayer, state);
call    0 never executed
        -: 1221:      }
        -: 1222:
        -: 1223:      //other players discard hand and redraw if hand size > 2
    #####: 1224:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1225:      {
    #####: 1226:	 if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1227:	 {
    #####: 1228:	    if ( state->handCount[i] > 4 ) //Altered code to cause incorrect behavior
branch  0 never executed
branch  1 never executed
        -: 1229:	    {
        -: 1230:	       //discard hand
        -: 1231:	       //discardHand(i, handPos, state); //Same as above line 1237
    #####: 1232:	       while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1233:	       {
    #####: 1234:		  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1235:	       }
        -: 1236:	       //draw 4
        -: 1237:	       //drawMultCards(i, 4, state); //Same as above line 1244
    #####: 1238:	       for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1239:	       {
    #####: 1240:		  drawCard(i, state);
call    0 never executed
        -: 1241:	       }
        -: 1242:
        -: 1243:	    }
        -: 1244:	 }
        -: 1245:      }
        -: 1246:   }
    #####: 1247:   return 0;
        -: 1248:}
function drawMultCards called 0 returned 0% blocks executed 0%
    #####: 1249:void drawMultCards(int player, int numcards, struct gameState* state) {
        -: 1250:   int j;
    #####: 1251:   for (j = 0; j < numcards; j++)
branch  0 never executed
branch  1 never executed
        -: 1252:   {
    #####: 1253:      drawCard(player, state);
call    0 never executed
        -: 1254:   }
    #####: 1255:}
function discardHand called 0 returned 0% blocks executed 0%
    #####: 1256:void discardHand(int player, int handPos, struct gameState* state){
    #####: 1257:   while( numHandCards(state) > 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1258:   {
    #####: 1259:      discardCard(handPos, player, state, 0);
call    0 never executed
        -: 1260:   }
    #####: 1261:}
        -: 1262:
function Ambassador called 0 returned 0% blocks executed 0%
    #####: 1263:int Ambassador(int choice1, int choice2, struct gameState *state, int handPos, int currentPlayer){
        -: 1264:   int i, j;
        -: 1265:
    #####: 1266:   j = 0;		//used to check if player has enough cards to discard
        -: 1267:
    #####: 1268:   for (i = 0; i < state->handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -: 1269:   {
    #####: 1270:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1271:      {
    #####: 1272:	 j++;
        -: 1273:      }
        -: 1274:   }
        -: 1275:
    #####: 1276:   if (choice2 > 2 || choice2 < 0 || choice1 == handPos || j< choice2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 1277:   {
    #####: 1278:      return -1;				
        -: 1279:   }
        -: 1280:   if (DEBUG) 
        -: 1281:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1282:
    #####: 1283:   choice1 = choice1 + 4; //Changes the card other players will gain, opposed to the one revealed
        -: 1284:
        -: 1285:   //increase supply count for choosen card by amount being discarded
    #####: 1286:   state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1287:
        -: 1288:   //each other player gains a copy of revealed card
    #####: 1289:   for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1290:   {
    #####: 1291:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1292:      {
    #####: 1293:	 gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
    #####: 1294:	 gainCard(state->hand[currentPlayer][choice1], state, 0, i); //Introduced replicate card gain
call    0 never executed
        -: 1295:      }
        -: 1296:   }
        -: 1297:
        -: 1298:   //discard played card from hand
        -: 1299:   //discardCard(handPos, currentPlayer, state, 0);			
        -: 1300:
        -: 1301:   //trash copies of cards returned to supply
    #####: 1302:   for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1303:   {
    #####: 1304:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1305:      {
    #####: 1306:	 if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1307:	 {
    #####: 1308:	    discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1309:	    break;
        -: 1310:	 }
        -: 1311:      }
        -: 1312:   }			
    #####: 1313:   return 0;
        -: 1314:}
        -: 1315:
function Tribute called 0 returned 0% blocks executed 0%
    #####: 1316:int Tribute(int currentPlayer, int nextPlayer, int tributeRevealedCards[], struct gameState *state, int handPos){
        -: 1317:   int i;
    #####: 1318:   if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1319:      if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1320:	 tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1321:	 state->deckCount[nextPlayer]--;
        -: 1322:      }
    #####: 1323:      else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1324:	 tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1325:	 state->discardCount[nextPlayer]--;
        -: 1326:      }
        -: 1327:      else{
        -: 1328:	 //No Card to Reveal
        -: 1329:	 if (DEBUG){
        -: 1330:	    printf("No cards to reveal\n");
        -: 1331:	 }
        -: 1332:      }
        -: 1333:   }
        -: 1334:
        -: 1335:   else{
    #####: 1336:      if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1337:	 for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1338:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1339:	    state->deckCount[nextPlayer]++;
    #####: 1340:	    state->discard[nextPlayer][i] = -1;
    #####: 1341:	    state->discardCount[nextPlayer]--;
        -: 1342:	 }
        -: 1343:
    #####: 1344:	 shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1345:      }
        -: 1346:
    #####: 1347:      for (i = 0; i < 2; i++){
branch  0 never executed
branch  1 never executed
    #####: 1348:	 tributeRevealedCards[i] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1349:	 state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1350:	 state->deckCount[nextPlayer]--;
        -: 1351:      }
        -: 1352:   }    
        -: 1353:
    #####: 1354:   if (tributeRevealedCards[0] != tributeRevealedCards[1]){	//I flipped the logic by adding a !
branch  0 never executed
branch  1 never executed
    #####: 1355:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1356:      state->playedCardCount++;
    #####: 1357:      tributeRevealedCards[0] = -1; //Instead of dropping one card we drop both cards
    #####: 1358:      tributeRevealedCards[1] = -1;
        -: 1359:   }
        -: 1360:
    #####: 1361:   for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1362:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1363:	 state->coins += 2;
        -: 1364:      }
        -: 1365:
    #####: 1366:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1367:	 drawMultCards(currentPlayer, 2, state);
call    0 never executed
        -: 1368:	 //	 discardHand(currentPlayer, handPos, state); //Discard whole hand afterwards.  
    #####: 1369:	 discardCard(handPos, currentPlayer, state, 2); //Discard 1 card afterwards.  
call    0 never executed
        -: 1370:
        -: 1371:
        -: 1372:      }
        -: 1373:      else{//Action Card
    #####: 1374:	 state->numActions = state->numActions + 2;
        -: 1375:      }
        -: 1376:   }
        -: 1377:
    #####: 1378:   return 0;
        -: 1379:}
        -: 1380:
function Mine called 0 returned 0% blocks executed 0%
    #####: 1381:int Mine(int choice1, int choice2, int currentPlayer, struct gameState *state, int handPos){
        -: 1382:   int i, j;
        -: 1383:
        -: 1384:
    #####: 1385:   j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1386:
        -: 1387:
    #####: 1388:   if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold || choice2 > treasure_map || choice2 < curse
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1389:	 ||
branch  0 never executed
branch  1 never executed
    #####: 1390:	 (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
        -: 1391:   {
        -: 1392:
    #####: 1393:      gainCard(choice2, state, 2, currentPlayer); //Introduced bug, gain the card even you trashed an invalid card 
call    0 never executed
        -: 1394:      // return -1;
        -: 1395:   }
        -: 1396:
    #####: 1397:   gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1398:
        -: 1399:   //discard card from hand
    #####: 1400:   discardCard(handPos+5 , currentPlayer, state, 0); //Introduced bug to discard an unintended card from the players hand
call    0 never executed
        -: 1401:
        -: 1402:
        -: 1403:   //discard trashed card
    #####: 1404:   for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1405:   {
    #####: 1406:      if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1407:      {
    #####: 1408:	 discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####: 1409:	 break;
        -: 1410:      }
        -: 1411:   }
        -: 1412:
    #####: 1413:   return 0;
        -: 1414:}
